{"version":3,"sources":["pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createStore","form","Array","type","formStoreContext","React","createContext","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","HomePageConsumer","classes","store","useContext","Error","useFormStore","useObserver","Container","maxWidth","CssBaseline","FormControl","className","style","marginTop","InputLabel","Select","MenuItem","value","HomePage","formStore","useLocalStore","Provider","App","AppBar","position","Toolbar","Typography","variant","path","exact","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAKMA,EAAc,iBAAO,CACzBC,KAAM,IAAIC,MAAM,IAChBC,KAAM,IAGFC,EAAmBC,IAAMC,cAAsD,MAU/EC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,SAIRC,EAA6B,WACjC,IAAMC,EAAUR,KAhBG,WACnB,IAAMS,EAAQX,IAAMY,WAAWb,GAC/B,IAAKY,EACH,MAAM,IAAIE,MAAM,oDAeAC,GAClB,OAAOC,aAAY,kBACjB,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAaC,UAAWV,EAAQL,YAAagB,MAAO,CAAEC,UAAW,SAC/D,kBAACC,EAAA,EAAD,aACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,MAAO,GAAjB,iBACA,kBAACD,EAAA,EAAD,CAAUC,MAAO,GAAjB,mBACA,kBAACD,EAAA,EAAD,CAAUC,MAAO,GAAjB,yBAgBKC,EATY,WACzB,IAAMC,EAAYC,YAAclC,GAChC,OACE,kBAACI,EAAiB+B,SAAlB,CAA2BJ,MAAOE,GAChC,kBAAC,EAAD,QCtBSG,MArBf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAACC,EAAD,WCRQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62420add.chunk.js","sourcesContent":["import React from 'react'\nimport { useLocalStore, useObserver } from 'mobx-react'\nimport { Container, CssBaseline, FormControl, InputLabel, MenuItem, Select } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst createStore = () => ({\n  form: new Array(12) as number[],\n  type: 0\n})\n\nconst formStoreContext = React.createContext <ReturnType<typeof createStore> | null>(null)\n\nconst useFormStore = () => {\n  const store = React.useContext(formStoreContext)\n  if (!store) {\n    throw new Error('useFormStore must be used within a StoreProvider')\n  }\n  return store\n}\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n}))\n\nconst HomePageConsumer: React.FC = () => {\n  const classes = useStyles()\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const formStore = useFormStore()\n  return useObserver(() => (\n    <Container maxWidth='xs'>\n      <CssBaseline/>\n      <FormControl className={classes.formControl} style={{ marginTop: '1rem' }}>\n        <InputLabel>Type</InputLabel>\n        <Select>\n          <MenuItem value={0}>Mild vs Viral</MenuItem>\n          <MenuItem value={1}>Severe vs Viral</MenuItem>\n          <MenuItem value={2}>Mild vs Severe</MenuItem>\n        </Select>\n      </FormControl>\n    </Container>\n  ))\n}\n\nconst HomePage: React.FC = () => {\n  const formStore = useLocalStore(createStore)\n  return (\n    <formStoreContext.Provider value={formStore}>\n      <HomePageConsumer/>\n    </formStoreContext.Provider>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\nimport {\n  AppBar, Toolbar, Typography\n} from '@material-ui/core'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport HomePage from './pages/Home'\n\nfunction App () {\n  return (\n    <div>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant='h6'>\n            COVID-19\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <BrowserRouter>\n        <Switch>\n          <Route path='/' exact>\n            <HomePage/>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}