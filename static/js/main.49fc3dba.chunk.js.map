{"version":3,"sources":["components/NumberInput.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NumberInput","label","field","callback","props","onChange","useCallback","target","Number","value","TextField","type","formData","error","createStore","form","Array","data","formStoreContext","React","createContext","useStyles","makeStyles","theme","formControl","display","flexDirection","flexWrap","margin","spacing","minWidth","inputField","marginLeft","marginRight","width","HomePageConsumer","classes","formStore","store","useContext","Error","useFormStore","useState","isSnackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","setField","index","showError","errorMessage","enter","forEach","item","useObserver","Container","maxWidth","CssBaseline","FormControl","className","style","marginTop","InputLabel","Select","defaultValue","event","MenuItem","map","key","Button","onClick","variant","color","endIcon","Send","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","elevation","severity","HomePage","useLocalStore","Provider","App","AppBar","position","Toolbar","Typography","path","url","process","exact","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.49fc3dba.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport { TextField, TextFieldProps } from '@material-ui/core'\n\nconst NumberInput: React.FC<TextFieldProps & {\n  label: string\n  field: number\n  callback: (index: number, value: number) => void\n}> = ({ label, field, callback, ...props }) => {\n  const onChange: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> =\n    useCallback((target) => {\n      callback(field, Number(target.target.value))\n    }, [field, callback])\n  return (\n    <TextField onChange={onChange} label={label} type='number' {...props}/>\n  )\n}\n\nexport default NumberInput\n","import React, { useCallback, useState } from 'react'\nimport { useLocalStore, useObserver } from 'mobx-react'\nimport {\n  Container, CssBaseline, FormControl, InputLabel, MenuItem,\n  Select, Button, Snackbar\n} from '@material-ui/core'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport { Send } from '@material-ui/icons'\nimport { makeStyles } from '@material-ui/core/styles'\nimport NumberInput from '../components/NumberInput'\n\nconst formData = [\n  { label: 'White blood cell', error: false },\n  { label: 'Hemoglobin', error: false },\n  { label: 'Platelet', error: false },\n  { label: 'Neutrophil count', error: false },\n  { label: 'Lymphocyte percent', error: false },\n  { label: 'Lymphocyte count', error: false },\n  { label: 'ESR', error: false },\n  { label: 'C-Reaction protein', error: false },\n  { label: 'Blood urea nitrogen (BUN)', error: false },\n  { label: 'Creatinine', error: false },\n  { label: 'Lactate dehydrogenase (LDN)', error: false },\n  { label: 'D-dimer', error: false }\n]\n\nconst createStore = () => ({\n  form: new Array(12) as number[],\n  type: 0,\n  data: [...formData]\n})\n\nconst formStoreContext = React.createContext <ReturnType<typeof createStore> | null>(null)\n\nconst useFormStore = () => {\n  const store = React.useContext(formStoreContext)\n  if (!store) {\n    throw new Error('useFormStore must be used within a StoreProvider')\n  }\n  return store\n}\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  inputField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '25ch'\n  }\n}))\n\nconst HomePageConsumer: React.FC = () => {\n  const classes = useStyles()\n  const formStore = useFormStore()\n  const [isSnackbarOpen, setSnackbarOpen] = useState<boolean>(false)\n  const [snackbarMessage, setSnackbarMessage] = useState<string>('')\n  const setField = useCallback((index: number, value: number) => {\n    formStore.form[index] = value\n    formStore.data[index].error = false\n  }, [formStore.form, formStore.data])\n  const showError = useCallback((errorMessage: string) => {\n    setSnackbarOpen(true)\n    setSnackbarMessage(errorMessage)\n  }, [])\n  const enter = useCallback(() => {\n    formStore.form.forEach((item, index) => {\n      if (item == null) {\n        !isSnackbarOpen && showError(`'${formData[index].label}' is empty`)\n        formStore.data[index].error = true\n      }\n    })\n  }, [formStore.form, formStore.data, showError, isSnackbarOpen])\n  return useObserver(() => (\n    <Container maxWidth='md'>\n      <CssBaseline/>\n      <FormControl className={classes.formControl} style={{ marginTop: '1rem' }}>\n        <InputLabel>Type</InputLabel>\n        <Select\n          className={classes.inputField}\n          defaultValue={0}\n          onChange={(event) => {\n            formStore.type = Number(event.target.value as number)\n          }}\n        >\n          <MenuItem value={0}>Mild vs Viral</MenuItem>\n          <MenuItem value={1}>Severe vs Viral</MenuItem>\n          <MenuItem value={2}>Mild vs Severe</MenuItem>\n        </Select>\n        {formStore.data.map((item, index) =>\n          (<NumberInput\n            className={classes.inputField}\n            error={item.error}\n            label={item.label}\n            field={index}\n            key={index}\n            callback={setField}\n          />))\n        }\n      </FormControl>\n      <Button onClick={enter} variant='contained' color='primary' endIcon={<Send/>}>Enter</Button>\n      <Snackbar\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        open={isSnackbarOpen}\n        autoHideDuration={6000}\n        onClose={() => { setSnackbarOpen(false) }}\n      >\n        <MuiAlert elevation={6} variant='filled' severity='error'>{snackbarMessage}</MuiAlert>\n      </Snackbar>\n    </Container>\n  ))\n}\n\nconst HomePage: React.FC = () => {\n  const formStore = useLocalStore(createStore)\n  return (\n    <formStoreContext.Provider value={formStore}>\n      <HomePageConsumer/>\n    </formStoreContext.Provider>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\nimport {\n  AppBar, Toolbar, Typography\n} from '@material-ui/core'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport HomePage from './pages/Home'\n\nconst fixedURL = (url: string) => `${process.env.PUBLIC_URL}${url}`\n\nfunction App () {\n  return (\n    <div>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant='h6'>\n            COVID-19\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <BrowserRouter>\n        <Switch>\n          <Route path={fixedURL('/')} exact>\n            <HomePage/>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}