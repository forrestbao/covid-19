// @ts-ignore
import * as svm from 'libsvm-js/asm'

export function svm_predict_with_model (
  /* the input array of numbers (length of 12) for inference */
  array_to_predict: number[],
  /* the minimum of each dimension of feature, an array of 12 numbers */
  feature_min_array: number[],
  /* the maximum of each dimension of feature, an array of 12 numbers */
  feature_max_array: number[],
  /* serialized model in string format, which is generated by svm-train libsvm */
  /* Check svm_covid_19_model_parameters.ts for example */
  serialized_model: string
): -1 | 1 {
  // preprocess input vector
  const preprocessed_vector = scale_input_array(
    array_to_predict,
    feature_min_array,
    feature_max_array
  )
  // load the model
  const pretrained_model = svm.load(serialized_model)

  // predict the parameters. The predict function takes a 2D array of number.
  // so we input as a 12*1 vector and get the label with index of 1
  const label = pretrained_model.predict([preprocessed_vector])
  return label[0]
}

/* This function is to preprocess the input array of numbers with max
and min value from training dataset, which is just the same as svm-scale */
function scale_input_array (array_to_predict: number[], feature_min_array: number[]
  , feature_max_array: number[]): number[] {
  if (array_to_predict.length !== feature_max_array.length ||
    array_to_predict.length !== feature_min_array.length) {
    throw new Error('Please check input dimensions.')
  }

  const return_vector: number[] = new Array(array_to_predict.length)

  for (let i = 0; i < array_to_predict.length; i++) {
    return_vector[i] =
      (array_to_predict[i] - feature_min_array[i]) /
      (feature_max_array[i] - feature_min_array[i])
  }

  return return_vector
}
